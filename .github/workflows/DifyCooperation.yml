name: Dify AI Code Analysis to MD File

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**.cs'

permissions:
  contents: write
  pull-requests: read # Read permission is sufficient if only reading PR context

jobs:
  analyze_and_create_report:
    runs-on: ubuntu-latest
    env:
      DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }}
      DIFY_API_BASE_URL: ${{ secrets.DIFY_API_BASE_URL }}
      DIFY_WORKFLOW_ID: ${{ secrets.DIFY_WORKFLOW_ID }}

    steps:
      # ステップ1: リポジトリのコードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # ステップ2: 変更されたC#ファイルの一覧を取得
      - name: Get changed C# files
        id: changed-files
        run: |
          files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '\.cs$' || true)
          if [ -z "$files" ]; then
            echo "No C# files changed."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "C# files to analyze: $files"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "files_json=$(echo "$files" | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT
          fi

      # ステップ3: Dify APIで各ファイルを解析し、結果をJSONで出力
      - name: Analyze each file with Dify API
        if: steps.changed-files.outputs.has_changes == 'true'
        id: analysis
        run: |
          json_results="[]"
          API_ENDPOINT="${DIFY_API_BASE_URL}/workflows/run"
          echo "Using Dify API Endpoint: $API_ENDPOINT"

          for file in $(echo '${{ steps.changed-files.outputs.files_json }}' | jq -r '.[]'); do
            encoded_content=$(base64 -w 0 "$file")
            
            # ★★★ ここがリファクタリングの核心 ★★★
            # Difyの開始ノードで定義した変数名 'encoded_script' に合わせてキーを変更します。
            json_payload=$(jq -n \
              --arg ec "$encoded_content" \
              --arg user "github-actions-${{ github.actor }}" \
              --arg workflow_id "$DIFY_WORKFLOW_ID" \
              '{
                "inputs": {
                  "encoded_script": $ec
                },
                "response_mode": "blocking",
                "user": $user,
                "workflow_id": $workflow_id
              }')

            api_response=$(curl -s -L -X POST "$API_ENDPOINT" -H "Authorization: Bearer $DIFY_API_KEY" -H 'Content-Type: application/json' -d "$json_payload")
            
            echo "API Response for ${file}:"
            echo "$api_response" | jq .

            mermaid_diagram=$(echo "$api_response" | jq -r '.answer')
            result_obj=$(jq -n --arg file "$file" --arg mermaid "$mermaid_diagram" '{ "file": $file, "mermaid": $mermaid }')
            json_results=$(echo "$json_results" | jq --argjson obj "$result_obj" '. + [$obj]')
          done

          echo "results_json=$(echo $json_results | jq -c .)" >> $GITHUB_OUTPUT

      # ステップ4: 解析結果からクラス図ファイルを個別に作成
      - name: Create Individual Markdown Report Files
        if: steps.analysis.outputs.results_json
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const results = JSON.parse('${{ steps.analysis.outputs.results_json }}');
            const outputBaseDir = 'docs/diagrams';

            for (const result of results) {
              const originalFilePath = result.file;
              const markdownFilePath = originalFilePath.replace(/\.cs$/, '.md');
              const outputPath = path.join(outputBaseDir, markdownFilePath);
              
              let report = `# Class Diagram for \`${originalFilePath}\`\n\n`;
              report += `\`\`\`mermaid\n`;
              report += `${result.mermaid || 'No diagram generated.'}\n`;
              report += `\`\`\`\n`;

              const outputDirForFile = path.dirname(outputPath);
              fs.mkdirSync(outputDirForFile, { recursive: true });
              fs.writeFileSync(outputPath, report);
              console.log(`Report generated at: ${outputPath}`);
            }
      
      # ステップ5: レポートファイルをコミット＆プッシュ
      - name: Commit and Push Report Files
        if: steps.analysis.outputs.results_json
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs(ai): Update class diagrams based on code changes"
          file_pattern: "docs/diagrams/**/*.md"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>"