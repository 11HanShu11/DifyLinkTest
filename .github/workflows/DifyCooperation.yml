name: Dify AI Code Analysis for C# (ID Method)

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**.cs'

permissions:
  pull-requests: write

jobs:
  analyze_cs_code_with_dify:
    runs-on: ubuntu-latest
    env:
      # ★★★ 修正点1: 使用するシークレットを2つに分割 ★★★
      DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }}
      DIFY_API_BASE_URL: ${{ secrets.DIFY_API_BASE_URL }} # 例: https://api.dify.ai/v1
      DIFY_WORKFLOW_ID: ${{ secrets.DIFY_WORKFLOW_ID }}   # ワークフローIDのみ

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed C# files
        id: changed-files
        run: |
          files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '\.cs$' || true)
          if [ -z "$files" ]; then
            echo "No C# files changed."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "C# files to analyze: $files"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "files_json=$(echo "$files" | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT
          fi

      - name: Analyze each file with Dify API
        if: steps.changed-files.outputs.has_changes == 'true'
        id: analysis
        run: |
          # JSON形式で解析結果をまとめるための配列を初期化
          json_results="[]"

          API_ENDPOINT="${DIFY_API_BASE_URL}/workflows/run"
          echo "Using Dify API Endpoint: $API_ENDPOINT"

          for file in $(echo '${{ steps.changed-files.outputs.files_json }}' | jq -r '.[]'); do
            echo "--- Analyzing $file ---"
            
            encoded_content=$(base64 -w 0 "$file")
            
            json_payload=$(jq -n \
              --arg ec "$encoded_content" \
              --arg user "github-actions-${{ github.actor }}" \
              --arg workflow_id "$DIFY_WORKFLOW_ID" \
              '{
                "inputs": { "encoded_script": $ec },
                "response_mode": "blocking",
                "user": $user,
                "workflow_id": $workflow_id
              }')
            
            api_response=$(curl --location --request POST "$API_ENDPOINT" \
              --header "Authorization: Bearer $DIFY_API_KEY" \
              --header 'Content-Type: application/json' \
              --data "$json_payload" \
              --silent)
              
            echo "--- Raw Dify API Response for $file ---"
            echo "$api_response"
            echo "----------------------------------------"
            
            mermaid_diagram=$(echo "$api_response" | jq -r '.answer')
            
            # ★★★ 変更点 ★★★
            # ファイルごとの結果をJSONオブジェクトとして作成し、配列に追加する
            result_obj=$(jq -n \
              --arg file "$file" \
              --arg mermaid "$mermaid_diagram" \
              '{ "file": $file, "mermaid": $mermaid }')
            
            json_results=$(echo "$json_results" | jq --argjson obj "$result_obj" '. + [$obj]')
          done

          # 最終的なJSON配列を後続のステップに渡す
          echo "results_json=$(echo $json_results | jq -c .)" >> $GITHUB_OUTPUT

      - name: Post analysis result to Pull Request
        if: steps.changed-files.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // ステップ1: 前のステップからJSON形式の結果を受け取り、パースする
            const results = JSON.parse('${{ steps.analysis.outputs.results_json }}');
            const { owner, repo, number } = context.issue;

            // ステップ2: JavaScript内で安全にレポートのMarkdownを組み立てる
            let report = "## :robot: Dify AI Code Analysis Report (C#)\n\n";

            for (const result of results) {
              // ここでバッククォートを使っても、JavaScriptのテンプレートリテラル内なので安全
              report += `### Analysis for \`${result.file}\`\n\n`;
              report += `**Mermaid Class Diagram:**\n`;
              report += `\`\`\`mermaid\n`;
              report += `${result.mermaid}\n`; // Difyからの結果を挿入
              report += `\`\`\`\n\n---\n`;
            }

            // ステップ3: コメントを投稿または更新する（このロジックは変更なし）
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number: number });
            const botComment = comments.find(c => c.user.login === 'github-actions[bot]' && c.body.includes('Dify AI Code Analysis Report'));

            if (botComment) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: botComment.id, body: report });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: number, body: report });
            }