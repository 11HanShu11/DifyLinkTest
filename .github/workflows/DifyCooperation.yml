# ワークフローの名前
name: Dify AI Code Analysis for C# (Base64 Method)

# ワークフローが実行されるトリガー
on:
  # プルリクエストが作成された、または新しいコミットがプッシュされた時
  pull_request:
    types: [opened, synchronize]
    paths:
      - "**.cs" # C#ファイルが変更された場合のみ実行

# ジョブの実行に必要な権限
permissions:
  pull-requests: write # プルリクエストへのコメント投稿に必要

jobs:
  # コード解析を実行するジョブ
  analyze_cs_code_with_dify:
    runs-on: ubuntu-latest
    steps:
      # ステップ1: リポジトリのコードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 変更差分を取得するために全履歴をフェッチ

      # ステップ2: 変更されたC#ファイルの一覧を取得
      - name: Get changed C# files
        id: changed-files
        run: |
          # ベースブランチとの差分から変更された.csファイルの一覧を取得
          files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '\.cs$' || true)
          if [ -z "$files" ]; then
            echo "No C# files changed. Skipping."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "C# files to analyze: $files"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            # ファイルリストを単一行のJSON配列に変換
            echo "files_json=$(echo "$files" | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT
          fi

      # ステップ3: 変更された各ファイルをDify APIで解析
      - name: Analyze each file with Dify API
        if: steps.changed-files.outputs.has_changes == 'true'
        id: analysis
        env:
          DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }}
          DIFY_WORKFLOW_URL: ${{ secrets.DIFY_WORKFLOW_ID }}
        run: |
          # final_report変数を初期化
             final_report="## :robot: Dify AI Code Analysis Report (C#)\n\n"
             
             # 変更されたファイルごとにループ処理
             for file in $(echo '${{ steps.changed-files.outputs.files_json }}' | jq -r '.[]'); do
               echo "--- Analyzing $file ---"
               
               # ファイルの内容を読み込み、Base64でエンコード
               encoded_content=$(base64 -w 0 "$file")
               
               # Dify APIに送信するJSONペイロードを構築
               # ★★★ 修正点1: 終了区切り文字 'EOF' を行頭に配置 ★★★
               read -r -d '' json_payload <<EOF
           {
             "inputs": {
               "encoded_script": "$encoded_content"
             },
             "response_mode": "blocking",
             "user": "github-actions-${{ github.actor }}"
           }
           EOF
               
               # DifyのワークフローAPIを呼び出す
               api_response=$(curl --location --request POST "$DIFY_WORKFLOW_URL" \
                 --header "Authorization: Bearer $DIFY_API_KEY" \
                 --header 'Content-Type: application/json' \
                 --data "$json_payload" \
                 --silent)
                 
               # ★★★ 修正点2: Difyからの生レスポンスをデバッグ表示 ★★★
               echo "--- Raw Dify API Response for $file ---"
               echo "$api_response"
               echo "----------------------------------------"
               
               # レスポンスをパースしてMermaidダイアグラムを抽出
               # Difyの出力が 'answer' キーに含まれると仮定
               mermaid_diagram=$(echo "$api_response" | jq -r '.answer')
               
               # レポート本文を組み立て
               final_report+="### Analysis for \`$file\`\n\n"
               final_report+="**Mermaid Class Diagram:**\n\`\`\`mermaid\n${mermaid_diagram}\n\`\`\`\n\n---\n"
             done
             
             # 複数行のレポートを後続のステップに渡す
             echo "report<<EOF" >> $GITHUB_OUTPUT
             echo -e "$final_report" >> $GITHUB_OUTPUT
             echo "EOF" >> $GITHUB_OUTPUT

      # ステップ4: 解析結果をプルリクエストにコメントとして投稿
      - name: Post analysis result to Pull Request
        if: steps.changed-files.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const report = `${{ steps.analysis.outputs.report }}`;
            // ... (コメント投稿のロジックは変更なし) ...
            const { owner, repo, number } = context.issue;
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number: number });
            const botComment = comments.find(c => c.user.login === 'github-actions[bot]' && c.body.includes('Dify AI Code Analysis Report'));
            if (botComment) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: botComment.id, body: report });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: number, body: report });
            }
