name: Generate C# Class Diagram # ワークフローの名前 [5]

on:
  pull_request: # プルリクエストが作成・更新された時にトリガー
    types: [opened, synchronize, reopened] # PRオープン、同期、再オープン時 [6]
    paths:
      - '**.cs' # .csファイルが変更された場合のみ実行 [5]

jobs:
  generate-diagram:
    runs-on: ubuntu-latest # 最新のUbuntuランナーで実行 [5]
    permissions:
      contents: read # コードチェックアウトのために必要 [6]
      pull-requests: write # PRにコメントを投稿するために必要 [6]
      issues: write # PRにコメントを投稿するために必要 (issues APIを使用) [6]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # リポジトリのコードをチェックアウト [5, 7]
      with:
        fetch-depth: 0 # 差分取得のために全ての履歴をフェッチ。git diff に必要 [6, 7]

    - name: Process changed C# files and generate diagrams
      id: dify_process # このステップのIDを設定し、後続ステップで出力を参照できるようにする
      env:
        DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }} # Dify APIキー (GitHub Secretsに設定) [8]
        DIFY_BASE_URL: 'https://api.dify.ai/v1' # DifyのベースURL [8, 9]
        DIFY_WORKFLOW_ID: ${{ secrets.DIFY_WORKFLOW_ID }} # DifyワークフローID (GitHub Secretsに設定) [8]
      run: |
        # 変更された.csファイルの一覧を取得
        # プルリクエストのベースコミット (PRの元となるブランチの最新コミット) と
        # ヘッドコミット (PRブランチの最新コミット) の間の差分から、変更された.csファイルを抽出 [7, 10]
        CHANGED_CS_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '\.cs$')

        if [ -z "$CHANGED_CS_FILES" ]; then
          echo "No C# files changed in this pull request. Skipping diagram generation."
          # コメントボディを空に設定し、後続ステップでコメント投稿をスキップさせる
          echo "comment_body<<EOF" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          exit 0
        fi

        # コメントボディの初期化
        FULL_COMMENT_BODY="## 🤖 AI Generated C# Class Diagrams\n\n"
        
        # 各変更されたC#ファイルについてDifyワークフローを呼び出し、結果を集約 [7, 11]
        # while IFS= read -r は、ファイルパスにスペースが含まれていても正しく処理するための慣用句
        while IFS= read -r file_path; do
          if [ -n "$file_path" ]; then # ファイルパスが空でないことを確認
            echo "Processing file: $file_path"
            # ファイル内容を読み込み、JSON文字列としてエスケープ [12]
            # Dify APIのinputsはJSON形式の文字列を受け取るため、jq -Rs . を使用
            FILE_CONTENT=$(cat "$file_path" | jq -Rs .)

            # Difyワークフローの実行 (POST /workflows/:workflow_id/run) [13, 14]
            RESPONSE=$(curl -X POST "${{ env.DIFY_BASE_URL }}/workflows/${{ env.DIFY_WORKFLOW_ID }}/run" \
              -H "Authorization: Bearer ${{ env.DIFY_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d '{
                "inputs": {
                  "csharp_code": '"$FILE_CONTENT"' # Difyワークフローの入力変数 "csharp_code" にファイル内容を渡す [2, 4]
                },
                "response_mode": "blocking", # 実行完了後に結果を返すブロッキングモード [8, 15, 16]
                "user": "github-actions-bot" # Difyへのリクエストユーザー識別子 [15-17]
              }')

            # Difyからの応答をパースして、クラス図のMermaidコードを抽出 [17, 18]
            MERMAID_DIAGRAM=$(echo "$RESPONSE" | jq -r '.data.outputs.mermaid_diagram')

            if [ -n "$MERMAID_DIAGRAM" ]; then
              # Mermaidコードが正常に生成された場合、コメントボディに追加 [17]
              FULL_COMMENT_BODY+="### for \`$file_path\`\n"
              FULL_COMMENT_BODY+="<details><summary>Click to expand diagram for \`$file_path\`</summary>\n\n\`\`\`mermaid\n$MERMAID_DIAGRAM\n\`\`\`\n\n</details>\n\n"
            else
              # 生成に失敗した場合
              FULL_COMMENT_BODY+="### for \`$file_path\`\n"
              FULL_COMMENT_BODY+="*Dify AI failed to generate a Mermaid diagram or no classes were found for this file.* \n\n"
            fi
          fi
        done <<< "$CHANGED_CS_FILES" # 変更されたファイルリストをループに渡す

        FULL_COMMENT_BODY+="\n*Powered by Dify AI*"
        
        # GitHub Actionsの出力として複数行のコメントボディを設定 (新しい書き方)
        # https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
        echo "comment_body<<EOF" >> $GITHUB_OUTPUT
        echo "$FULL_COMMENT_BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Post aggregated comment to GitHub
      uses: actions/github-script@v6 # GitHub APIを操作するためのアクション [19]
      # コメントボディが空でない場合にのみ実行
      if: ${{ always() && steps.dify_process.outputs.comment_body != '' }}
      env:
          COMMENT_BODY: ${{ steps.dify_process.outputs.comment_body }}
      with:
        script: |
          const commentBody = process.env.COMMENT_BODY;
          const { owner, repo } = context.repo;
          const pullRequestNumber = context.payload.pull_request?.number; // PR番号を取得 [20]

          if (!pullRequestNumber) {
            console.log("This is not a pull request event. Skipping comment posting.");
            return;
          }

          await github.rest.issues.createComment({ # GitHubのissues APIを使ってコメントを投稿 [19, 21]
            owner,
            repo,
            issue_number: pullRequestNumber, # PR番号をissue_numberとして使用 [20]
            body: commentBody
          });
