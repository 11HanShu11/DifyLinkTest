name: Dify AI Code Analysis to MD File

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "**.cs"

# ★★★ 変更点1: リポジトリへの書き込み権限を追加 ★★★
permissions:
  contents: write # 生成したファイルをプッシュするために必要
  pull-requests: write # (オプション) PRへのコメントも残したい場合に備えて

jobs:
  analyze_and_create_report:
    runs-on: ubuntu-latest
    env:
      DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }}
      DIFY_API_BASE_URL: ${{ secrets.DIFY_API_BASE_URL }}
      DIFY_WORKFLOW_ID: ${{ secrets.DIFY_WORKFLOW_ID }}

    steps:
      # ★★★ ここを修正 ★★★
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # プルリクエストの差分を正しく取得するために全履歴をフェッチ

      # ステップ2: 変更されたC#ファイルの一覧を取得
      - name: Get changed C# files
        id: changed-files
        run: |
          files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '\.cs$' || true)
          if [ -z "$files" ]; then
            echo "No C# files changed."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "C# files to analyze: $files"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "files_json=$(echo "$files" | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT
          fi

      # ステップ3: 変更された各ファイルをDify APIで解析し、結果をJSONで出力
      - name: Analyze each file with Dify API
        if: steps.changed-files.outputs.has_changes == 'true'
        id: analysis
        run: |
          # JSON形式で解析結果をまとめるための配列を初期化
          json_results="[]"
          API_ENDPOINT="${DIFY_API_BASE_URL}/workflows/run"
          echo "Using Dify API Endpoint: $API_ENDPOINT"

          for file in $(echo '${{ steps.changed-files.outputs.files_json }}' | jq -r '.[]'); do
            encoded_content=$(base64 -w 0 "$file")
            json_payload=$(jq -n --arg ec "$encoded_content" --arg user "github-actions-${{ github.actor }}" --arg workflow_id "$DIFY_WORKFLOW_ID" '{"inputs": {"encoded_script": $ec},"response_mode": "blocking","user": $user,"workflow_id": $workflow_id}')
            
            # DifyのワークフローAPIを呼び出す
            api_response=$(curl -s -L -X POST "$API_ENDPOINT" -H "Authorization: Bearer $DIFY_API_KEY" -H 'Content-Type: application/json' -d "$json_payload")
            
            # ★★★ ここからが修正箇所 ★★★
            # Difyからの生レスポンスをご希望の形式でログに出力します
            echo "API Response:"
            echo "$api_response" | jq . # jq . でJSONを整形して表示
            # ★★★ ここまで ★★★

            mermaid_diagram=$(echo "$api_response" | jq -r '.answer')
            result_obj=$(jq -n --arg file "$file" --arg mermaid "$mermaid_diagram" '{ "file": $file, "mermaid": $mermaid }')
            json_results=$(echo "$json_results" | jq --argjson obj "$result_obj" '. + [$obj]')
          done

          echo "results_json=$(echo $json_results | jq -c .)" >> $GITHUB_OUTPUT

      # ★★★ 変更点2: 新しいステップ「レポートファイル作成」 ★★★
      # 解析結果のJSONからMarkdownファイルを生成する
      - name: Create Markdown Report File
        if: steps.analysis.outputs.results_json
        id: create_report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const results = JSON.parse('${{ steps.analysis.outputs.results_json }}');

            // ファイル名をプルリクエスト番号に基づいて動的に生成
            const pr_number = context.issue.number;
            const outputDir = 'docs/debug';
            const outputFile = `pr-${pr_number}-report.md`;
            const outputPath = path.join(outputDir, outputFile);

            let report = `# :robot: Dify AI Code Analysis Report for PR #${pr_number}\n\n`;

            for (const result of results) {
              report += `## Analysis for \`${result.file}\`\n\n`;
              report += `### Mermaid Class Diagram\n`;
              report += `\`\`\`mermaid\n`;
              report += `${result.mermaid || 'No diagram generated.'}\n`;
              report += `\`\`\`\n\n---\n`;
            }

            // ディレクトリを作成し、ファイルを書き込む
            fs.mkdirSync(outputDir, { recursive: true });
            fs.writeFileSync(outputPath, report);

            console.log(`Report generated at: ${outputPath}`);
            // 後続のステップで使えるようにファイルパスを出力
            core.setOutput('report_path', outputPath);

      # ★★★ 変更点3: 新しいステップ「レポートファイルをコミット＆プッシュ」 ★★★
      # 生成されたMarkdownファイルをリポジトリにコミットしてプッシュする
      - name: Commit and Push Report File
        if: steps.create_report.outputs.report_path
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs(ai): Generate AI analysis report for PR #${{ github.event.pull_request.number }}"
          file_pattern: "docs/debug/*.md"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          commit_author: "${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>"
