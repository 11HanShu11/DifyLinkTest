"using System.Collections.Generic;\nusing UnityEngine;\nusing System;\nusing Dreamteck.Splines;\nusing UnityEngine.Splines;\nusing DG.Tweening;\nusing Cysharp.Threading.Tasks;\nusing System.Threading;\n\nnamespace Sugoroku\n{\n    public class CameraWorking : MonoBehaviour\n    {\n        [SerializeField] Transform _target;\n        [SerializeField] Transform _mainCameraTrans;\n        [SerializeField] GameObject CameraParent;\n\n        private Vector3 _defaultPos;\n        private SplineAnimate _splineAnime;\n        private Transform _moveTrans;\n        private CancellationTokenSource _standbyCts;\n\n        void Start()\n        {\n            var obj = new GameObject();\n            _moveTrans = obj.transform;\n            _splineAnime = CameraParent.GetComponent<SplineAnimate>();\n\n            _splineAnime.enabled = false;\n        }\n\n        /// <summary>\n        /// スタート演出終了でスタンバイカメラワーク開始\n        /// </summary>\n        public void BeginningWork()\n        {\n            _mainCameraTrans.transform.parent = CameraParent.transform;\n            _mainCameraTrans.localPosition = Vector3.zero;\n            StartStandbyCameraLoop();\n        }\n\n        /// <summary>\n        /// スタンバイ中のカメラモーション開始\n        /// </summary>\n        private void StartStandbyCameraLoop()\n        {\n            _splineAnime.enabled = true;\n            _standbyCts?.Cancel();\n            _standbyCts = new CancellationTokenSource();\n            StandbyCameraLoopAsync(_standbyCts.Token).Forget();\n        }\n\n        /// <summary>\n        /// スタンバイ中のカメラモーション停止\n        /// </summary>\n        public void StopStandbyCameraLoop()\n        {\n            _splineAnime.enabled = false;\n            _standbyCts?.Cancel();\n        }\n\n        private async UniTaskVoid StandbyCameraLoopAsync(CancellationToken token)\n        {\n            while (!token.IsCancellationRequested)\n            {\n                if (_target != null)\n                {\n                    _mainCameraTrans.transform.LookAt(_target);\n                }\n\n                await UniTask.Yield(PlayerLoopTiming.Update, token);\n            }\n        }\n\n        /// <summary>\n        /// サイコロを振った際に移動演出を開始する\n        /// </summary>\n        public void BeginDiceRollEvent(int pieceTileIndex)\n        {\n            _defaultPos = _mainCameraTrans.transform.position;\n            StopStandbyCameraLoop();\n            UpdateCameraTargetByTileIndex(pieceTileIndex);\n            _mainCameraTrans.DOMove(_moveTrans.position, 1);\n            _mainCameraTrans.DORotate(_moveTrans.eulerAngles, 1);\n        }\n\n        /// <summary>\n        ///  ターンが終了した際にカメラを元の状態に戻す\n        /// </summary>\n        public void EndDiceRollEvent()\n        {\n            StartStandbyCameraLoop();\n            _mainCameraTrans.DOMove(_defaultPos, 1);\n        }\n\n        /// <summary>\n        /// 駒の位置に追従してカメラを移動する\n        /// </summary>\n        /// <param name=\"number\"></param>\n        public void MoveToPiecePosition(int number)\n        {\n            UpdateCameraTargetByTileIndex(number);\n            _mainCameraTrans.DOMove(_moveTrans.position, .3f).SetEase(Ease.InQuad);\n            _mainCameraTrans.DORotate(_moveTrans.eulerAngles, .3f).SetEase(Ease.InQuad);\n        }\n\n        /// <summary>\n        /// 駒の位置からカメラの目標座標・角度を決定する\n        /// </summary>\n        /// <param name=\"number\"></param>\n        private void UpdateCameraTargetByTileIndex(int number)\n        {\n            Vector3 pos;\n            int rotateY;\n\n            const int rotateX = 35;\n\n            if (number <= 9)\n            {\n                pos = new Vector3(12, 7, 0);\n                rotateY = -90;\n            }\n            else if (number <= 18)\n            {\n                pos = new Vector3(0, 7, -12);\n                rotateY = 0;\n            }\n            else if (number <= 27)\n            {\n                pos = new Vector3(-12, 7, 0);\n                rotateY = 90;\n            }\n            else if (number <= 36)\n            {\n                pos = new Vector3(0, 7, 12);\n                rotateY = 180;\n            }\n            else\n            {\n                throw new ArgumentOutOfRangeException(nameof(number), $\"Invalid number: {number}\");\n            }\n\n            _moveTrans.position = pos;\n            _moveTrans.eulerAngles = new Vector3(rotateX, rotateY, 0);\n        }\n    }\n}\n"
