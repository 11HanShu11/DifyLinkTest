"using System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing Cysharp.Threading.Tasks;\nusing DG.Tweening;\n\npublic class SugorokuAnime : MonoBehaviour\n{\n    [SerializeField] private List<Button> _buttons;\n    [SerializeField] private Animator _anime;\n    [SerializeField] private Transform _playerPos;\n\n    private int _previousSign = 0; // -1, 0, 1 を格納\n    private string[] _animationNames = { \"Run2_R\", \"Run2_L\", \"Parkour001_L\", \"Drift_L\", \"GoalPerformance_Kawaii_A\", \"Brake\"};\n    private string[] _selectedAnimationName = { \"Run_R\", \"Run_L\" };\n    private const float FADE_TIME = 0.2f;\n    private bool _isRunning = false;\n\n    void Start()\n    {\n        SettingButtons();\n        _anime.Play(_animationNames[5]);\n    }\n    \n    /// <summary>\n    /// 開始アニメーション\n    /// 開始カウントダウン終了で実行\n    /// </summary>\n    /// <returns></returns>\n    public async UniTask StartAnimation()\n    {\n        DefaultAnimation(_previousSign);// 開始時にループ再生\n        await UniTask.Delay(TimeSpan.FromSeconds(3));\n        StartRandomMovement().Forget(); // 非同期で動作開始\n    }\n\n    private void SettingButtons()\n    {\n        int smaller = Mathf.Min(_buttons.Count, _animationNames.Length);\n\n        for (int i = 0; i < smaller; i++)\n        {\n            int index = i; // クロージャ対策\n            _buttons[i].onClick.AddListener(() => _ = PlayTemporaryAnimation(_animationNames[index]));\n        }\n    }\n\n    private async UniTaskVoid PlayTemporaryAnimation(string clipName)\n    {\n        StopAllCoroutines(); // 複数押されたときの処理衝突防止\n        await PlayAndReturnToDefault(clipName);\n    }\n\n    private async UniTask PlayAndReturnToDefault(string clipName)\n    {\n        _anime.CrossFade(clipName, FADE_TIME);\n\n        // CrossFadeによって状態が切り替わるのを待つ（次のフレーム）\n        await UniTask.Yield();\n\n        // 状態が正しく更新されるまで少し待機\n        await UniTask.WaitUntil(() => _anime.GetCurrentAnimatorStateInfo(0).IsName(clipName));\n\n        AnimatorStateInfo state = _anime.GetCurrentAnimatorStateInfo(0);\n        float length = state.length;\n\n        // 念のため、length分+α待つ（途中で切れるのを防ぐ）\n        await UniTask.Delay(TimeSpan.FromSeconds(length + 0.1f));\n\n        // 元のループアニメーションに戻す\n        DefaultAnimation(_previousSign);\n    }\n\n\n\n    #region ループアニメ処理\n    private async UniTaskVoid StartRandomMovement()\n    {\n        _isRunning = true;\n\n        while (_isRunning)\n        {\n            // ランダムな方向を取得\n            int rndmMoveX = UnityEngine.Random.Range(-3, 3);\n            int rndmMoveZ = UnityEngine.Random.Range(-2, 2);\n\n            _playerPos.DOMoveX(rndmMoveX, 2);\n            _playerPos.DOMoveZ(rndmMoveZ, 2);\n            DefaultAnimation(rndmMoveX);\n\n            // ランダムな待機時間\n            float waitTime = UnityEngine.Random.Range(3, 5);\n            await UniTask.Delay(TimeSpan.FromSeconds(waitTime));\n        }\n    }\n\n    /// <summary>\n    /// プレイヤーのアニメーター実行\n    /// </summary>\n    /// <param name=\"newSign\"></param>\n    private void DefaultAnimation(int newSign)\n    {\n        if (newSign <= 0)\n        {\n            _anime.CrossFade(_selectedAnimationName[0], FADE_TIME);\n        }\n        else\n        {\n            _anime.CrossFade(_selectedAnimationName[1], FADE_TIME);\n        }\n    }\n    #endregion\n\n}\n"
