"using System.Collections.Generic;\nusing UnityEngine;\nusing DG.Tweening;\n\npublic class TileManager : MonoBehaviour\n{\n    private const string SHDER_PROPERTY_TEX_1 = \"_Tex_1\";\n    private const string SHDER_PROPERTY_TEX_2 = \"_Tex_2\";\n    private const float JUMP_TIME = 0.07f;\n\n    [SerializeField] private List<GameObject> _tiles = new();\n    [SerializeField] private Material _roadMaterial;\n    [SerializeField] private List<Texture> _setTextures;\n    [SerializeField] private Texture _defaultTextures;\n    [SerializeField] private Shader _tileChange;\n\n    private List<Material> materials = new();\n    private int _changedCount;\n\n    public List<GameObject> Tiles => _tiles;\n\n    private void Awake()\n    {\n        SettingMaterialTile();\n    }\n\n    /// <summary>\n    /// タイルObjにマテリアルを設定する\n    /// </summary>\n    private void SettingMaterialTile()\n    {\n        foreach (var tile in _tiles)\n        {\n            var renderer = tile.GetComponent<Renderer>();\n            if (renderer != null && renderer.material != null)\n            {\n                Material newMat = new Material(_tileChange);\n                newMat.SetTexture(SHDER_PROPERTY_TEX_1, _defaultTextures);\n                renderer.material = newMat;\n\n                materials.Add(renderer.material);\n            }\n            else\n            {\n                Debug.LogWarning($\"{tile.name} に Renderer または Material が設定されていません。\");\n                materials.Add(null); // nullで埋めておくか、スキップも可\n            }\n        }\n    }\n\n    private void OnDisable()\n    {\n        RoadMoving(false);\n    }\n\n    /// <summary>\n    /// 中心FloorのMaterialをPieceの場所により変化\n    /// </summary>\n    public Tween ChangeRoadVisual(float time, int walkCount)\n    {\n        bool isEvenStep = walkCount % 2 == 0;\n        float fromValue = isEvenStep ? 1f : 0f;\n        float toValue = 1f - fromValue;\n\n        return DOVirtual.Float(\n        from: fromValue,\n        to: toValue,\n        duration: time,\n            onVirtualUpdate: (tweenValue) =>\n            {\n                _roadMaterial.SetFloat(\"_ChangeValue\", tweenValue);\n            }).OnStart(() =>\n            {\n                ApplyRoadMaterialChange();\n            });\n    }\n\n    /// <summary>\n    /// マテリアルの変更処理\n    /// _roadMaterialを適宜変更する\n    /// </summary>\n    private void ApplyRoadMaterialChange()\n    {\n        _changedCount++;\n\n        int matIndex = _changedCount % materials.Count;\n        Material tileMat = materials[matIndex];\n        float tileValue = tileMat.GetFloat(\"_ChangeValue\");\n\n        string tileTexProp = tileValue == 0f ? SHDER_PROPERTY_TEX_1 : SHDER_PROPERTY_TEX_2;\n        Texture newTex = tileMat.GetTexture(tileTexProp);\n\n        string targetTexProp = (_changedCount % 2 == 0) ? SHDER_PROPERTY_TEX_1 : SHDER_PROPERTY_TEX_2;\n        _roadMaterial.SetTexture(targetTexProp, newTex);\n    }\n\n    /// <summary>\n    /// タイルの更新\n    /// </summary>\n    /// <param name=\"number\">進行数</param>\n    public void UpdateTiles()\n    {\n        Sequence sequence = DOTween.Sequence();\n\n        for (int i = 0; i < _tiles.Count; i++)\n        {\n\n            Transform _moveTrans = _tiles[i].transform;\n            Vector3 setPos = _moveTrans.position;\n\n            sequence.Append(_moveTrans.transform.DOJump(setPos, .7f, 1, JUMP_TIME));\n            sequence.Join(ChangeTile(JUMP_TIME, materials[i]));\n        }\n\n        sequence.Play();\n    }\n\n    /// <summary>\n    /// マテリアルのテクスチャ変更\n    /// </summary>\n    /// <param name=\"time\"></param>\n    /// <param name=\"mate\"></param>\n    /// <returns></returns>\n    public Tween ChangeTile(float time, Material mate)\n    {\n        float to = 0;\n\n        string propertyName = \"\";\n        var value = mate.GetFloat(\"_ChangeValue\");\n\n        if (value == 0)\n        {\n            propertyName = SHDER_PROPERTY_TEX_2;\n            to = 1;\n        }\n        else\n        {\n            propertyName = SHDER_PROPERTY_TEX_1;\n            to = 0;\n        }\n\n        int rnd = Random.Range(0, _setTextures.Count);\n        mate.SetTexture(propertyName, _setTextures[rnd]);\n\n        return DOVirtual.Float(\n            from: value,\n            to: to,\n            duration: time,\n            onVirtualUpdate: (tweenValue) =>\n            {\n                mate.SetFloat(\"_ChangeValue\", tweenValue);\n            });\n    }\n\n    /// <summary>\n    /// 中心の床を動作有無\n    /// </summary>\n    public void RoadMoving(bool isMoving)\n    {\n        Vector2 speed = (isMoving) ? new Vector2(0f, -2f) : Vector2.zero;\n        _roadMaterial.SetVector(\"_Speed\", speed);\n    }\n}\n\n\n"
