{"workflow_id": "aUtPPGtElU340YXf", "inputs": {"csharp_code": "\\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing Cysharp.Threading.Tasks;\nusing DG.Tweening;\nusing UniRx;\n\nnamespace Sugoroku\n{\n    public class RollingDice : MonoBehaviour\n    {\n        private const float ROLL_TIME = 1f; //rサイコロの回転を見せる時間\n        private const float RESULT_TIME = 1f; //rサイコロの結果を見せる時間\n\n\n        [SerializeField] private List<Sprite> _diceSprites; // 0〜5: サイコロ目1〜6\n        [SerializeField] private Image _diceDisplay;\n        [SerializeField] private Button _diceBtn;\n        [SerializeField] private Button _testBtn;\n\n        private readonly Subject<int> _diceResult = new Subject<int>();\n        public IObservable<int> DiceResult => _diceResult;\n\n        private readonly Subject<Unit> _startDiceRoll = new Subject<Unit>();\n        public IObservable<Unit> StartDiceRoll => _startDiceRoll;\n\n        private void Start()\n        {\n            _diceDisplay.enabled = false;\n            _diceBtn.onClick.AddListener(() => _ = StartDiceRollAsync());\n        }\n\n        /// <summary>\n        /// サイコロのロール全体処理\n        /// </summary>\n        private async UniTaskVoid StartDiceRollAsync()\n        {\n            _diceDisplay.enabled = true;\n            _startDiceRoll.OnNext(Unit.Default);\n\n            int result = await AnimateDiceRollingAsync(TimeSpan.FromSeconds(ROLL_TIME));\n            await ShowResultAsync(result, TimeSpan.FromSeconds(RESULT_TIME));\n\n            _diceDisplay.enabled = false;\n            _diceResult.OnNext(result);\n        }\n\n        /// <summary>\n        /// 指定時間、ランダムにサイコロの目を変化させる\n        /// </summary>\n        /// <param name=\"duration\">アニメーション時間</param>\n        /// <returns　int = currentResult> サイコロの目の結果</returns>\n        private async UniTask<int> AnimateDiceRollingAsync(TimeSpan duration)\n        {\n            float endTime = Time.time + (float)duration.TotalSeconds;\n            int currentResult = 1;\n\n            while (Time.time < endTime)\n            {\n                currentResult = UnityEngine.Random.Range(1, 7);\n                SetDiceFace(currentResult);\n                await UniTask.Delay(TimeSpan.FromSeconds(0.1));\n            }\n\n            return currentResult;\n        }\n\n        /// <summary>\n        /// 指定された目を表示したまま一定時間表示する\n        /// </summary>\n        /// <param name=\"diceNumber\">出目</param>\n        /// <param name=\"duration\">公開時間</param>\n        private async UniTask ShowResultAsync(int diceNumber, TimeSpan duration)\n        {\n            SetDiceFace(diceNumber);\n            await UniTask.Delay(duration);\n        }\n\n        /// <summary>\n        ///  サイコロのスプライトを変更する（1〜6を0〜5に変換）\n        /// </summary>\n        /// <param name=\"diceNumber\">出目</param>\n        private void SetDiceFace(int diceNumber)\n        {\n            int index = Mathf.Clamp(diceNumber - 1, 0, _diceSprites.Count - 1);\n            _diceDisplay.sprite = _diceSprites[index];\n        }\n    }\n}\\n\n", "ClassDiagramsMd": {"type": "file", "name": "ClassDiagrams.md", "content": "IyMg8J+kliBBSSBHZW5lcmF0ZWQgQyMgQ2xhc3MgRGlhZ3JhbXNcblxuIyMjIG1haW4vRGlmeVRlc3RfUm9sbGluZ0RpY2UuY3NcbipGYWlsZWQgdG8gZ2VuZXJhdGUgZGlhZ3JhbSpcblxuCg=="}, "sys.user_id": "github-actions-bot", "sys.app_id": "dummy-app-id", "sys.workflow_id": "dummy-workflow-id", "sys.workflow_run_id": "dummy-run-id"}, "response_mode": "blocking", "user": "github-actions-bot"}
