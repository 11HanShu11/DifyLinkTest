"using System;\nusing UnityEngine;\nusing System.Collections.Generic;\nusing DG.Tweening;\nusing Cysharp.Threading.Tasks;\nusing UnityEngine.UI;\nusing UniRx;\n\npublic class PieceMoving : MonoBehaviour\n{\n    private const float JUMP_POWER = 0.6f; //ジャンプ力\n    private const float JUMP_TIME = 0.2f; //移動時間\n\n    [SerializeField] private Transform _pieceTrans;\n\n    public List<GameObject> Tiles { private get; set; }\n    public int CurrentTileIndex => _currentTileIndex;\n    public ReactiveProperty<bool> IsPieceMove = new ReactiveProperty<bool>(false);\n    public IObservable<(float, int)> RoadChange => _roadChange;\n    public IObservable<Unit> GetTile => _getTile;\n\n    private int _currentTileIndex = 0;\n    private readonly Subject<(float, int)> _roadChange = new Subject<(float, int)>();\n    private readonly Subject<Unit> _getTile = new Subject<Unit>();\n\n    void Start()\n    {\n        _getTile.OnNext(Unit.Default);\n        // TimeScaleController.Instance.SetTimeScale(\"Slow\", 0.2f);\n        // DOVirtual.DelayedCall(5f, () => TimeScaleController.Instance.ClearTimeScale(\"Slow\"));  \n    }\n\n    /// <summary>\n    /// 移動とアニメーション\n    /// </summary>\n    /// <param name=\"number\">進行数</param>\n    public void ProceedPiece(int number)\n    {\n        Sequence sequence = DOTween.Sequence();\n\n        IsPieceMove.Value = true;\n        for (int i = 0; i < number; i++)\n        {\n            _currentTileIndex++;\n\n            Vector3 nextPos = NextPos(_currentTileIndex);\n\n            sequence.Append(_pieceTrans.transform.DOJump(nextPos, JUMP_POWER, 1, JUMP_TIME));\n            sequence.AppendCallback(() => _roadChange.OnNext((JUMP_TIME, _currentTileIndex)));\n        }\n\n        sequence.OnComplete(() =>\n            {\n                Debug.Log(\"アニメーションが終了しました\");\n                IsPieceMove.Value = false;\n            });\n\n        sequence.Play();\n    }\n\n    /// <summary>\n    /// 進行位置の決定\n    /// </summary>\n    /// <param name=\"number\">歩数合計</param>\n    /// <returns = Vector3> 進行位置</returns>\n    private Vector3 NextPos(int tileIndex)\n    {\n        _currentTileIndex = tileIndex % (Tiles.Count);\n\n        var tilePos = Tiles[_currentTileIndex].transform.position;\n        tilePos.y += 1;\n\n        return tilePos;\n    }\n\n}\n"
